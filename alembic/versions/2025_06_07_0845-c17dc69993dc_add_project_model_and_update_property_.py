"""Add project model and update property to reference projects

Revision ID: c17dc69993dc
Revises: ed00dba37ca7
Create Date: 2025-06-07 08:45:10.678799

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c17dc69993dc"
down_revision: Union[str, None] = "ed00dba37ca7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "projects",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("street", sa.String(length=255), nullable=False),
        sa.Column("house_number", sa.String(length=50), nullable=False),
        sa.Column("city", sa.String(length=255), nullable=False),
        sa.Column("city_id", sa.UUID(), nullable=True),
        sa.Column("state", sa.String(length=255), nullable=False),
        sa.Column("country", sa.String(length=100), nullable=True),
        sa.Column("zip_code", sa.String(length=20), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("construction_year", sa.Integer(), nullable=True),
        sa.Column("renovation_year", sa.Integer(), nullable=True),
        sa.Column("total_floors", sa.Integer(), nullable=True),
        sa.Column("building_type", sa.String(length=100), nullable=True),
        sa.Column("has_elevator", sa.Boolean(), nullable=True),
        sa.Column("has_parking", sa.Boolean(), nullable=True),
        sa.Column("has_basement", sa.Boolean(), nullable=True),
        sa.Column("has_garden", sa.Boolean(), nullable=True),
        sa.Column("energy_certificate_type", sa.String(length=50), nullable=True),
        sa.Column("energy_consumption", sa.Float(), nullable=True),
        sa.Column("energy_class", sa.String(length=10), nullable=True),
        sa.Column("heating_type", sa.String(length=100), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("amenities", sa.JSON(), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("created_by", sa.UUID(), nullable=False),
        sa.Column("updated_by", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["cities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project_images",
        sa.Column("project_id", sa.UUID(), nullable=False),
        sa.Column("image_url", sa.Text(), nullable=False),
        sa.Column("image_type", sa.String(length=50), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("display_order", sa.Integer(), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=True),
        sa.Column("mime_type", sa.String(length=100), nullable=True),
        sa.Column("width", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("created_by", sa.UUID(), nullable=False),
        sa.Column("updated_by", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("properties", sa.Column("project_id", sa.UUID(), nullable=False))
    op.add_column(
        "properties", sa.Column("unit_number", sa.String(length=100), nullable=False)
    )
    op.create_foreign_key(None, "properties", "projects", ["project_id"], ["id"])
    op.drop_column("properties", "latitude")
    op.drop_column("properties", "total_floors")
    op.drop_column("properties", "longitude")
    op.drop_column("properties", "country")
    op.drop_column("properties", "construction_year")
    op.drop_column("properties", "street")
    op.drop_column("properties", "house_number")
    op.drop_column("properties", "renovation_year")
    
    # Add RLS policies for projects table
    op.execute("ALTER TABLE projects ENABLE ROW LEVEL SECURITY")
    op.execute("""
        CREATE POLICY tenant_isolation ON projects
        FOR ALL
        USING (tenant_id = current_setting('app.current_tenant_id')::uuid)
    """)
    
    # Add RLS policies for project_images table
    op.execute("ALTER TABLE project_images ENABLE ROW LEVEL SECURITY")
    op.execute("""
        CREATE POLICY tenant_isolation ON project_images
        FOR ALL
        USING (tenant_id = current_setting('app.current_tenant_id')::uuid)
    """)
    
    # Enable RLS for all existing tables that don't have it
    tables_to_enable_rls = [
        'tenants', 'users', 'roles', 'permissions', 'role_permissions', 'user_roles',
        'tenant_identity_providers', 'user_sessions', 'audit_logs', 'properties',
        'property_images', 'cities', 'city_images', 'expose_templates', 'expose_links',
        'expose_link_views', 'investagon_syncs'
    ]
    
    for table in tables_to_enable_rls:
        op.execute(f"""
            DO $$
            BEGIN
                -- Enable RLS if not already enabled
                IF NOT EXISTS (
                    SELECT 1 FROM pg_tables 
                    WHERE tablename = '{table}' 
                    AND rowsecurity = true
                ) THEN
                    ALTER TABLE {table} ENABLE ROW LEVEL SECURITY;
                END IF;
                
                -- Create policy if not exists
                IF NOT EXISTS (
                    SELECT 1 FROM pg_policies 
                    WHERE tablename = '{table}' 
                    AND policyname = 'tenant_isolation'
                ) THEN
                    -- Check if table has tenant_id column
                    IF EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = '{table}' 
                        AND column_name = 'tenant_id'
                    ) THEN
                        CREATE POLICY tenant_isolation ON {table}
                        FOR ALL
                        USING (tenant_id = current_setting('app.current_tenant_id')::uuid);
                    END IF;
                END IF;
            END
            $$;
        """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop RLS policies for new tables
    op.execute("DROP POLICY IF EXISTS tenant_isolation ON project_images")
    op.execute("ALTER TABLE project_images DISABLE ROW LEVEL SECURITY")
    op.execute("DROP POLICY IF EXISTS tenant_isolation ON projects")
    op.execute("ALTER TABLE projects DISABLE ROW LEVEL SECURITY")
    
    op.add_column(
        "properties",
        sa.Column("renovation_year", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "properties",
        sa.Column(
            "house_number", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "properties",
        sa.Column("street", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    )
    op.add_column(
        "properties",
        sa.Column(
            "construction_year", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "properties",
        sa.Column(
            "country", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "properties",
        sa.Column(
            "longitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "properties",
        sa.Column("total_floors", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "properties",
        sa.Column(
            "latitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "properties", type_="foreignkey")
    op.drop_column("properties", "unit_number")
    op.drop_column("properties", "project_id")
    op.drop_table("project_images")
    op.drop_table("projects")
    # ### end Alembic commands ###
