"""Add Standortleiter role and user team relationships

Revision ID: f11d8e36e142
Revises: 390dc5350828
Create Date: 2025-07-01 23:05:47.853389

"""

from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "f11d8e36e142"
down_revision: Union[str, None] = "390dc5350828"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_requests",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
        ),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("role_id", sa.UUID(), nullable=True),
        sa.Column("requested_by", sa.UUID(), nullable=False),
        sa.Column(
            "status", sa.String(length=50), server_default="pending", nullable=False
        ),
        sa.Column("reviewed_by", sa.UUID(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["requested_by"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["reviewed_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_team_assignments",
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
        ),
        sa.Column("manager_id", sa.UUID(), nullable=False),
        sa.Column("member_id", sa.UUID(), nullable=False),
        sa.Column("assigned_by", sa.UUID(), nullable=True),
        sa.Column(
            "assigned_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["assigned_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["manager_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["member_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "manager_id", "member_id", "tenant_id", name="uq_team_assignment"
        ),
    )
    # ### end Alembic commands ###
    
    # Create indexes for performance
    op.create_index("idx_team_assignments_manager", "user_team_assignments", ["manager_id", "tenant_id"])
    op.create_index("idx_team_assignments_member", "user_team_assignments", ["member_id", "tenant_id"])
    op.create_index("idx_user_requests_status", "user_requests", ["status", "tenant_id"])
    
    # Insert new permissions
    permissions_data = [
        ('Request user creation', 'users', 'request_create'),
        ('Read team member data', 'users', 'read_team'),
        ('View team reports', 'reports', 'team')
    ]
    
    for description, resource, action in permissions_data:
        op.execute(f"""
            INSERT INTO permissions (id, description, resource, action, created_at, updated_at)
            VALUES ('{uuid.uuid4()}', '{description}', '{resource}', '{action}', NOW(), NOW())
            ON CONFLICT (resource, action) DO NOTHING
        """)
    
    # Insert Location Manager role
    role_id = str(uuid.uuid4())
    op.execute(f"""
        INSERT INTO roles (id, name, description, is_system_role, tenant_id, created_at, updated_at)
        VALUES (
            '{role_id}',
            'location_manager',
            'Sales manager with team oversight and reporting capabilities',
            true,
            NULL,
            NOW(),
            NOW()
        )
    """)
    
    # Add permissions to Location Manager role
    permission_pairs = [
        ('users', 'request_create'),
        ('users', 'read_team'),
        ('properties', 'read'),
        ('projects', 'read'),
        ('reports', 'team'),
        ('expose', 'create'),
        ('expose', 'read')
    ]
    
    for resource, action in permission_pairs:
        op.execute(f"""
            INSERT INTO role_permissions (id, role_id, permission_id, created_at, updated_at)
            SELECT '{uuid.uuid4()}', '{role_id}', id, NOW(), NOW()
            FROM permissions 
            WHERE resource = '{resource}' AND action = '{action}'
        """)


def downgrade() -> None:
    """Downgrade schema."""
    # Remove role permissions for Location Manager
    op.execute("""
        DELETE FROM role_permissions 
        WHERE role_id IN (SELECT id FROM roles WHERE name = 'location_manager' AND is_system_role = true)
    """)
    
    # Remove Location Manager role
    op.execute("""
        DELETE FROM roles WHERE name = 'location_manager' AND is_system_role = true
    """)
    
    # Remove new permissions
    op.execute("""
        DELETE FROM permissions 
        WHERE (resource = 'users' AND action IN ('request_create', 'read_team'))
           OR (resource = 'reports' AND action = 'team')
    """)
    
    # Drop indexes
    op.drop_index("idx_user_requests_status", "user_requests")
    op.drop_index("idx_team_assignments_member", "user_team_assignments")
    op.drop_index("idx_team_assignments_manager", "user_team_assignments")
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_team_assignments")
    op.drop_table("user_requests")
    # ### end Alembic commands ###
