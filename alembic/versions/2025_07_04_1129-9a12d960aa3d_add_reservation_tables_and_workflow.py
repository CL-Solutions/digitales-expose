"""add reservation tables and workflow

Revision ID: 9a12d960aa3d
Revises: 397e7e82ac1e
Create Date: 2025-07-04 11:29:47.780840

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "9a12d960aa3d"
down_revision: Union[str, None] = "397e7e82ac1e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "reservations",
        sa.Column("property_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("customer_name", sa.String(length=255), nullable=False),
        sa.Column("customer_email", sa.String(length=255), nullable=True),
        sa.Column("customer_phone", sa.String(length=50), nullable=True),
        sa.Column("equity_amount", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column("equity_percentage", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("is_90_10_deal", sa.Boolean(), nullable=False),
        sa.Column(
            "adjusted_purchase_price", sa.Numeric(precision=10, scale=2), nullable=True
        ),
        sa.Column(
            "external_commission", sa.Numeric(precision=10, scale=2), nullable=True
        ),
        sa.Column(
            "internal_commission", sa.Numeric(precision=10, scale=2), nullable=True
        ),
        sa.Column("reservation_fee_paid", sa.Boolean(), nullable=False),
        sa.Column("reservation_fee_paid_date", sa.DateTime(), nullable=True),
        sa.Column("preferred_notary", sa.String(length=255), nullable=True),
        sa.Column("notary_appointment_date", sa.DateTime(), nullable=True),
        sa.Column("notary_appointment_time", sa.DateTime(), nullable=True),
        sa.Column("notary_location", sa.String(length=500), nullable=True),
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("waitlist_position", sa.Integer(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("cancellation_reason", sa.Text(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("created_by", sa.UUID(), nullable=False),
        sa.Column("updated_by", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["property_id"], ["properties.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_reservations_is_active", "reservations", ["is_active"], unique=False
    )
    op.create_index(
        "idx_reservations_property_id", "reservations", ["property_id"], unique=False
    )
    op.create_index("idx_reservations_status", "reservations", ["status"], unique=False)
    op.create_index(
        "idx_reservations_user_id", "reservations", ["user_id"], unique=False
    )
    op.create_table(
        "reservation_status_history",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("reservation_id", sa.UUID(), nullable=False),
        sa.Column("changed_by", sa.UUID(), nullable=False),
        sa.Column("from_status", sa.Integer(), nullable=True),
        sa.Column("to_status", sa.Integer(), nullable=False),
        sa.Column("changed_at", sa.DateTime(), nullable=False),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["changed_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reservation_id"], ["reservations.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###
    
    # Add reservation permissions
    op.execute("""
        INSERT INTO permissions (id, resource, action, description, created_at)
        VALUES 
            (gen_random_uuid(), 'reservations', 'create', 'Create new reservations', NOW()),
            (gen_random_uuid(), 'reservations', 'read', 'View reservations', NOW()),
            (gen_random_uuid(), 'reservations', 'update', 'Update reservation details', NOW()),
            (gen_random_uuid(), 'reservations', 'delete', 'Delete reservations', NOW()),
            (gen_random_uuid(), 'reservations', 'manage', 'Manage all reservations and status transitions', NOW())
        ON CONFLICT (resource, action) DO NOTHING;
    """)
    
    # Update tenant_admin role
    op.execute("""
        INSERT INTO role_permissions (id, role_id, permission_id, created_at)
        SELECT gen_random_uuid(), r.id, p.id, NOW()
        FROM roles r, permissions p
        WHERE r.name = 'tenant_admin'
        AND p.resource = 'reservations'
        AND p.action IN ('create', 'read', 'update', 'delete', 'manage')
        AND NOT EXISTS (
            SELECT 1 FROM role_permissions rp 
            WHERE rp.role_id = r.id AND rp.permission_id = p.id
        );
    """)
    
    # Update property_manager role
    op.execute("""
        INSERT INTO role_permissions (id, role_id, permission_id, created_at)
        SELECT gen_random_uuid(), r.id, p.id, NOW()
        FROM roles r, permissions p
        WHERE r.name = 'property_manager'
        AND p.resource = 'reservations'
        AND p.action IN ('create', 'read', 'update', 'delete', 'manage')
        AND NOT EXISTS (
            SELECT 1 FROM role_permissions rp 
            WHERE rp.role_id = r.id AND rp.permission_id = p.id
        );
    """)
    
    # Update sales_person role
    op.execute("""
        INSERT INTO role_permissions (id, role_id, permission_id, created_at)
        SELECT gen_random_uuid(), r.id, p.id, NOW()
        FROM roles r, permissions p
        WHERE r.name = 'sales_person'
        AND p.resource = 'reservations'
        AND p.action IN ('create', 'read', 'delete')
        AND NOT EXISTS (
            SELECT 1 FROM role_permissions rp 
            WHERE rp.role_id = r.id AND rp.permission_id = p.id
        );
    """)
    
    # Update location_manager role
    op.execute("""
        INSERT INTO role_permissions (id, role_id, permission_id, created_at)
        SELECT gen_random_uuid(), r.id, p.id, NOW()
        FROM roles r, permissions p
        WHERE r.name = 'location_manager'
        AND p.resource = 'reservations'
        AND p.action IN ('create', 'read', 'delete')
        AND NOT EXISTS (
            SELECT 1 FROM role_permissions rp 
            WHERE rp.role_id = r.id AND rp.permission_id = p.id
        );
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # Remove role permissions
    op.execute("""
        DELETE FROM role_permissions 
        WHERE permission_id IN (
            SELECT id FROM permissions WHERE resource = 'reservations'
        );
    """)
    
    # Remove permissions
    op.execute("DELETE FROM permissions WHERE resource = 'reservations';")
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("reservation_status_history")
    op.drop_index("idx_reservations_user_id", table_name="reservations")
    op.drop_index("idx_reservations_status", table_name="reservations")
    op.drop_index("idx_reservations_property_id", table_name="reservations")
    op.drop_index("idx_reservations_is_active", table_name="reservations")
    op.drop_table("reservations")
    # ### end Alembic commands ###
